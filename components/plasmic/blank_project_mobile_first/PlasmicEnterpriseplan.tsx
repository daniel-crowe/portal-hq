// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pZ4uecV2QmMik2KVUENP9v
// Component: -r3AtHSM7-U

import * as React from "react"

import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/react-web/lib/host"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"

import projectcss from "./plasmic_blank_project_mobile_first.module.css" // plasmic-import: pZ4uecV2QmMik2KVUENP9v/projectcss
import sty from "./PlasmicEnterpriseplan.module.css" // plasmic-import: -r3AtHSM7-U/css

import _16OutlinedSuggestedSymbolCheckIcon from "./icons/PlasmicIcon___16OutlinedSuggestedSymbolCheck" // plasmic-import: GKNjyGG-rd/icon

export type PlasmicEnterpriseplan__VariantMembers = {}
export type PlasmicEnterpriseplan__VariantsArgs = {}
type VariantPropType = keyof PlasmicEnterpriseplan__VariantsArgs
export const PlasmicEnterpriseplan__VariantProps = new Array<VariantPropType>()

export type PlasmicEnterpriseplan__ArgsType = {}
type ArgPropType = keyof PlasmicEnterpriseplan__ArgsType
export const PlasmicEnterpriseplan__ArgProps = new Array<ArgPropType>()

export type PlasmicEnterpriseplan__OverridesType = {
  businessPriceBoxSingle?: p.Flex<"div">
  mainContainer?: p.Flex<"div">
  enterprise?: p.Flex<"div">
  featuresList?: p.Flex<"div">
  iconAndSection8?: p.Flex<"div">
  iconBox?: p.Flex<"div">
  sectionName8?: p.Flex<"div">
  link13?: p.Flex<"div">
  iconAndSection9?: p.Flex<"div">
  iconBox2?: p.Flex<"div">
  sectionName9?: p.Flex<"div">
  link14?: p.Flex<"div">
  iconAndSection10?: p.Flex<"div">
  iconBox3?: p.Flex<"div">
  sectionName10?: p.Flex<"div">
  link15?: p.Flex<"div">
  button3?: p.Flex<"div">
  label3?: p.Flex<"div">
}

export interface DefaultEnterpriseplanProps {
  className?: string
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn())
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise
  })

function PlasmicEnterpriseplan__RenderFunc(props: {
  variants: PlasmicEnterpriseplan__VariantsArgs
  args: PlasmicEnterpriseplan__ArgsType
  overrides: PlasmicEnterpriseplan__OverridesType
  forNode?: string
}) {
  const { variants, overrides, forNode } = props

  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])

  const $props = {
    ...args,
    ...variants,
  }
  const refsRef = React.useRef({})
  const $refs = refsRef.current

  const currentUser = p.useCurrentUser?.() || {}
  const [$queries, setDollarQueries] = React.useState({})

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"businessPriceBoxSingle"}
      data-plasmic-override={overrides.businessPriceBoxSingle}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.businessPriceBoxSingle,
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"mainContainer"}
        data-plasmic-override={overrides.mainContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.mainContainer)}
      >
        <div
          data-plasmic-name={"enterprise"}
          data-plasmic-override={overrides.enterprise}
          className={classNames(projectcss.all, sty.enterprise)}
        >
          <div
            className={classNames(projectcss.all, projectcss.__wab_text, sty.text__bnp7F)}
          >
            {"Enterprise"}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, projectcss.__wab_text, sty.text__p7DuG)}
        >
          {"Custom"}
        </div>
        <div
          className={classNames(projectcss.all, projectcss.__wab_text, sty.text___0PAou)}
        >
          {
            "For high volume requests and everything needed to support your decentralized apps."
          }
        </div>
        <div
          className={classNames(projectcss.all, projectcss.__wab_text, sty.text__mwT8G)}
        >
          {"Team plan plus:"}
        </div>
        <p.Stack
          as={"div"}
          data-plasmic-name={"featuresList"}
          data-plasmic-override={overrides.featuresList}
          hasGap={true}
          className={classNames(projectcss.all, sty.featuresList)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"iconAndSection8"}
            data-plasmic-override={overrides.iconAndSection8}
            hasGap={true}
            className={classNames(projectcss.all, sty.iconAndSection8)}
          >
            <div
              data-plasmic-name={"iconBox"}
              data-plasmic-override={overrides.iconBox}
              className={classNames(projectcss.all, sty.iconBox)}
            >
              <_16OutlinedSuggestedSymbolCheckIcon
                className={classNames(projectcss.all, sty.svg__cQwYz)}
                role={"img"}
              />
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionName8"}
              data-plasmic-override={overrides.sectionName8}
              hasGap={true}
              className={classNames(projectcss.all, sty.sectionName8)}
            >
              <div
                data-plasmic-name={"link13"}
                data-plasmic-override={overrides.link13}
                className={classNames(projectcss.all, projectcss.__wab_text, sty.link13)}
              >
                {"Custom limits"}
              </div>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"iconAndSection9"}
            data-plasmic-override={overrides.iconAndSection9}
            hasGap={true}
            className={classNames(projectcss.all, sty.iconAndSection9)}
          >
            <div
              data-plasmic-name={"iconBox2"}
              data-plasmic-override={overrides.iconBox2}
              className={classNames(projectcss.all, sty.iconBox2)}
            >
              <_16OutlinedSuggestedSymbolCheckIcon
                className={classNames(projectcss.all, sty.svg__iBjCg)}
                role={"img"}
              />
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionName9"}
              data-plasmic-override={overrides.sectionName9}
              hasGap={true}
              className={classNames(projectcss.all, sty.sectionName9)}
            >
              <div
                data-plasmic-name={"link14"}
                data-plasmic-override={overrides.link14}
                className={classNames(projectcss.all, projectcss.__wab_text, sty.link14)}
              >
                {"Unlimited applications"}
              </div>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"iconAndSection10"}
            data-plasmic-override={overrides.iconAndSection10}
            hasGap={true}
            className={classNames(projectcss.all, sty.iconAndSection10)}
          >
            <div
              data-plasmic-name={"iconBox3"}
              data-plasmic-override={overrides.iconBox3}
              className={classNames(projectcss.all, sty.iconBox3)}
            >
              <_16OutlinedSuggestedSymbolCheckIcon
                className={classNames(projectcss.all, sty.svg___8D48K)}
                role={"img"}
              />
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionName10"}
              data-plasmic-override={overrides.sectionName10}
              hasGap={true}
              className={classNames(projectcss.all, sty.sectionName10)}
            >
              <div
                data-plasmic-name={"link15"}
                data-plasmic-override={overrides.link15}
                className={classNames(projectcss.all, projectcss.__wab_text, sty.link15)}
              >
                {"Volume discounts and bespoke features."}
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </p.Stack>
      <div
        data-plasmic-name={"button3"}
        data-plasmic-override={overrides.button3}
        className={classNames(projectcss.all, sty.button3)}
      >
        <div
          data-plasmic-name={"label3"}
          data-plasmic-override={overrides.label3}
          className={classNames(projectcss.all, projectcss.__wab_text, sty.label3)}
        >
          {"Schedule a Call"}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  businessPriceBoxSingle: [
    "businessPriceBoxSingle",
    "mainContainer",
    "enterprise",
    "featuresList",
    "iconAndSection8",
    "iconBox",
    "sectionName8",
    "link13",
    "iconAndSection9",
    "iconBox2",
    "sectionName9",
    "link14",
    "iconAndSection10",
    "iconBox3",
    "sectionName10",
    "link15",
    "button3",
    "label3",
  ],
  mainContainer: [
    "mainContainer",
    "enterprise",
    "featuresList",
    "iconAndSection8",
    "iconBox",
    "sectionName8",
    "link13",
    "iconAndSection9",
    "iconBox2",
    "sectionName9",
    "link14",
    "iconAndSection10",
    "iconBox3",
    "sectionName10",
    "link15",
  ],
  enterprise: ["enterprise"],
  featuresList: [
    "featuresList",
    "iconAndSection8",
    "iconBox",
    "sectionName8",
    "link13",
    "iconAndSection9",
    "iconBox2",
    "sectionName9",
    "link14",
    "iconAndSection10",
    "iconBox3",
    "sectionName10",
    "link15",
  ],
  iconAndSection8: ["iconAndSection8", "iconBox", "sectionName8", "link13"],
  iconBox: ["iconBox"],
  sectionName8: ["sectionName8", "link13"],
  link13: ["link13"],
  iconAndSection9: ["iconAndSection9", "iconBox2", "sectionName9", "link14"],
  iconBox2: ["iconBox2"],
  sectionName9: ["sectionName9", "link14"],
  link14: ["link14"],
  iconAndSection10: ["iconAndSection10", "iconBox3", "sectionName10", "link15"],
  iconBox3: ["iconBox3"],
  sectionName10: ["sectionName10", "link15"],
  link15: ["link15"],
  button3: ["button3", "label3"],
  label3: ["label3"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number]
type NodeDefaultElementType = {
  businessPriceBoxSingle: "div"
  mainContainer: "div"
  enterprise: "div"
  featuresList: "div"
  iconAndSection8: "div"
  iconBox: "div"
  sectionName8: "div"
  link13: "div"
  iconAndSection9: "div"
  iconBox2: "div"
  sectionName9: "div"
  link14: "div"
  iconAndSection10: "div"
  iconBox3: "div"
  sectionName10: "div"
  link15: "div"
  button3: "div"
  label3: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEnterpriseplan__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEnterpriseplan__VariantsArgs
    args?: PlasmicEnterpriseplan__ArgsType
    overrides?: NodeOverridesType<T>
  } & Omit<PlasmicEnterpriseplan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEnterpriseplan__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEnterpriseplan__ArgProps,
          internalVariantPropNames: PlasmicEnterpriseplan__VariantProps,
        }),
      [props, nodeName],
    )
    return PlasmicEnterpriseplan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "businessPriceBoxSingle") {
    func.displayName = "PlasmicEnterpriseplan"
  } else {
    func.displayName = `PlasmicEnterpriseplan.${nodeName}`
  }
  return func
}

export const PlasmicEnterpriseplan = Object.assign(
  // Top-level PlasmicEnterpriseplan renders the root element
  makeNodeComponent("businessPriceBoxSingle"),
  {
    // Helper components rendering sub-elements
    mainContainer: makeNodeComponent("mainContainer"),
    enterprise: makeNodeComponent("enterprise"),
    featuresList: makeNodeComponent("featuresList"),
    iconAndSection8: makeNodeComponent("iconAndSection8"),
    iconBox: makeNodeComponent("iconBox"),
    sectionName8: makeNodeComponent("sectionName8"),
    link13: makeNodeComponent("link13"),
    iconAndSection9: makeNodeComponent("iconAndSection9"),
    iconBox2: makeNodeComponent("iconBox2"),
    sectionName9: makeNodeComponent("sectionName9"),
    link14: makeNodeComponent("link14"),
    iconAndSection10: makeNodeComponent("iconAndSection10"),
    iconBox3: makeNodeComponent("iconBox3"),
    sectionName10: makeNodeComponent("sectionName10"),
    link15: makeNodeComponent("link15"),
    button3: makeNodeComponent("button3"),
    label3: makeNodeComponent("label3"),

    // Metadata about props expected for PlasmicEnterpriseplan
    internalVariantProps: PlasmicEnterpriseplan__VariantProps,
    internalArgProps: PlasmicEnterpriseplan__ArgProps,
  },
)

export default PlasmicEnterpriseplan
/* prettier-ignore-end */
