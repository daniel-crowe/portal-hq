// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pZ4uecV2QmMik2KVUENP9v
// Component: f8xP7uKc7_O

import * as React from "react"

import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/react-web/lib/host"

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"

import projectcss from "./plasmic_blank_project_mobile_first.module.css" // plasmic-import: pZ4uecV2QmMik2KVUENP9v/projectcss
import sty from "./PlasmicTeamplan.module.css" // plasmic-import: f8xP7uKc7_O/css

import _16OutlinedSuggestedSymbolCheckIcon from "./icons/PlasmicIcon___16OutlinedSuggestedSymbolCheck" // plasmic-import: GKNjyGG-rd/icon

export type PlasmicTeamplan__VariantMembers = {}
export type PlasmicTeamplan__VariantsArgs = {}
type VariantPropType = keyof PlasmicTeamplan__VariantsArgs
export const PlasmicTeamplan__VariantProps = new Array<VariantPropType>()

export type PlasmicTeamplan__ArgsType = {}
type ArgPropType = keyof PlasmicTeamplan__ArgsType
export const PlasmicTeamplan__ArgProps = new Array<ArgPropType>()

export type PlasmicTeamplan__OverridesType = {
  teamPriceBoxSingle?: p.Flex<"div">
  mainContainer2?: p.Flex<"div">
  team?: p.Flex<"div">
  featuresList2?: p.Flex<"div">
  iconAndSection11?: p.Flex<"div">
  iconBox4?: p.Flex<"div">
  sectionName11?: p.Flex<"div">
  link16?: p.Flex<"div">
  iconAndSection12?: p.Flex<"div">
  iconBox5?: p.Flex<"div">
  sectionName12?: p.Flex<"div">
  link17?: p.Flex<"div">
  button4?: p.Flex<"div">
  label4?: p.Flex<"div">
}

export interface DefaultTeamplanProps {
  className?: string
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn())
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise
  })

function PlasmicTeamplan__RenderFunc(props: {
  variants: PlasmicTeamplan__VariantsArgs
  args: PlasmicTeamplan__ArgsType
  overrides: PlasmicTeamplan__OverridesType
  forNode?: string
}) {
  const { variants, overrides, forNode } = props

  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])

  const $props = {
    ...args,
    ...variants,
  }
  const refsRef = React.useRef({})
  const $refs = refsRef.current

  const currentUser = p.useCurrentUser?.() || {}
  const [$queries, setDollarQueries] = React.useState({})

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"teamPriceBoxSingle"}
      data-plasmic-override={overrides.teamPriceBoxSingle}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.teamPriceBoxSingle,
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"mainContainer2"}
        data-plasmic-override={overrides.mainContainer2}
        hasGap={true}
        className={classNames(projectcss.all, sty.mainContainer2)}
      >
        <div
          data-plasmic-name={"team"}
          data-plasmic-override={overrides.team}
          className={classNames(projectcss.all, sty.team)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8JSiB,
            )}
          >
            {"Team"}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, projectcss.__wab_text, sty.text__zirI3)}
        >
          {"Pay as you go"}
        </div>
        <div
          className={classNames(projectcss.all, projectcss.__wab_text, sty.text__gkPi2)}
        >
          {
            "For projects on their way to the moon, scale as you need it with the support to get you there."
          }
        </div>
        <div
          className={classNames(projectcss.all, projectcss.__wab_text, sty.text__vbVv9)}
        >
          {"Developer plan plus:"}
        </div>
        <p.Stack
          as={"div"}
          data-plasmic-name={"featuresList2"}
          data-plasmic-override={overrides.featuresList2}
          hasGap={true}
          className={classNames(projectcss.all, sty.featuresList2)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"iconAndSection11"}
            data-plasmic-override={overrides.iconAndSection11}
            hasGap={true}
            className={classNames(projectcss.all, sty.iconAndSection11)}
          >
            <div
              data-plasmic-name={"iconBox4"}
              data-plasmic-override={overrides.iconBox4}
              className={classNames(projectcss.all, sty.iconBox4)}
            >
              <_16OutlinedSuggestedSymbolCheckIcon
                className={classNames(projectcss.all, sty.svg___4AS8N)}
                role={"img"}
              />
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionName11"}
              data-plasmic-override={overrides.sectionName11}
              hasGap={true}
              className={classNames(projectcss.all, sty.sectionName11)}
            >
              <div
                data-plasmic-name={"link16"}
                data-plasmic-override={overrides.link16}
                className={classNames(projectcss.all, projectcss.__wab_text, sty.link16)}
              >
                {"$0.000007456 / API call"}
              </div>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"iconAndSection12"}
            data-plasmic-override={overrides.iconAndSection12}
            hasGap={true}
            className={classNames(projectcss.all, sty.iconAndSection12)}
          >
            <div
              data-plasmic-name={"iconBox5"}
              data-plasmic-override={overrides.iconBox5}
              className={classNames(projectcss.all, sty.iconBox5)}
            >
              <_16OutlinedSuggestedSymbolCheckIcon
                className={classNames(projectcss.all, sty.svg___63ShC)}
                role={"img"}
              />
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionName12"}
              data-plasmic-override={overrides.sectionName12}
              hasGap={true}
              className={classNames(projectcss.all, sty.sectionName12)}
            >
              <div
                data-plasmic-name={"link17"}
                data-plasmic-override={overrides.link17}
                className={classNames(projectcss.all, projectcss.__wab_text, sty.link17)}
              >
                {"Support"}
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
        <div
          className={classNames(projectcss.all, projectcss.__wab_text, sty.text__bqiD)}
        >
          {"Calculate your costs"}
        </div>
      </p.Stack>
      <div
        data-plasmic-name={"button4"}
        data-plasmic-override={overrides.button4}
        className={classNames(projectcss.all, sty.button4)}
      >
        <div
          data-plasmic-name={"label4"}
          data-plasmic-override={overrides.label4}
          className={classNames(projectcss.all, projectcss.__wab_text, sty.label4)}
        >
          {"Get started"}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  teamPriceBoxSingle: [
    "teamPriceBoxSingle",
    "mainContainer2",
    "team",
    "featuresList2",
    "iconAndSection11",
    "iconBox4",
    "sectionName11",
    "link16",
    "iconAndSection12",
    "iconBox5",
    "sectionName12",
    "link17",
    "button4",
    "label4",
  ],
  mainContainer2: [
    "mainContainer2",
    "team",
    "featuresList2",
    "iconAndSection11",
    "iconBox4",
    "sectionName11",
    "link16",
    "iconAndSection12",
    "iconBox5",
    "sectionName12",
    "link17",
  ],
  team: ["team"],
  featuresList2: [
    "featuresList2",
    "iconAndSection11",
    "iconBox4",
    "sectionName11",
    "link16",
    "iconAndSection12",
    "iconBox5",
    "sectionName12",
    "link17",
  ],
  iconAndSection11: ["iconAndSection11", "iconBox4", "sectionName11", "link16"],
  iconBox4: ["iconBox4"],
  sectionName11: ["sectionName11", "link16"],
  link16: ["link16"],
  iconAndSection12: ["iconAndSection12", "iconBox5", "sectionName12", "link17"],
  iconBox5: ["iconBox5"],
  sectionName12: ["sectionName12", "link17"],
  link17: ["link17"],
  button4: ["button4", "label4"],
  label4: ["label4"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number]
type NodeDefaultElementType = {
  teamPriceBoxSingle: "div"
  mainContainer2: "div"
  team: "div"
  featuresList2: "div"
  iconAndSection11: "div"
  iconBox4: "div"
  sectionName11: "div"
  link16: "div"
  iconAndSection12: "div"
  iconBox5: "div"
  sectionName12: "div"
  link17: "div"
  button4: "div"
  label4: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamplan__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamplan__VariantsArgs
    args?: PlasmicTeamplan__ArgsType
    overrides?: NodeOverridesType<T>
  } & Omit<PlasmicTeamplan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTeamplan__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTeamplan__ArgProps,
          internalVariantPropNames: PlasmicTeamplan__VariantProps,
        }),
      [props, nodeName],
    )
    return PlasmicTeamplan__RenderFunc({ variants, args, overrides, forNode: nodeName })
  }
  if (nodeName === "teamPriceBoxSingle") {
    func.displayName = "PlasmicTeamplan"
  } else {
    func.displayName = `PlasmicTeamplan.${nodeName}`
  }
  return func
}

export const PlasmicTeamplan = Object.assign(
  // Top-level PlasmicTeamplan renders the root element
  makeNodeComponent("teamPriceBoxSingle"),
  {
    // Helper components rendering sub-elements
    mainContainer2: makeNodeComponent("mainContainer2"),
    team: makeNodeComponent("team"),
    featuresList2: makeNodeComponent("featuresList2"),
    iconAndSection11: makeNodeComponent("iconAndSection11"),
    iconBox4: makeNodeComponent("iconBox4"),
    sectionName11: makeNodeComponent("sectionName11"),
    link16: makeNodeComponent("link16"),
    iconAndSection12: makeNodeComponent("iconAndSection12"),
    iconBox5: makeNodeComponent("iconBox5"),
    sectionName12: makeNodeComponent("sectionName12"),
    link17: makeNodeComponent("link17"),
    button4: makeNodeComponent("button4"),
    label4: makeNodeComponent("label4"),

    // Metadata about props expected for PlasmicTeamplan
    internalVariantProps: PlasmicTeamplan__VariantProps,
    internalArgProps: PlasmicTeamplan__ArgProps,
  },
)

export default PlasmicTeamplan
/* prettier-ignore-end */
